# File: .github/workflows/build-openwrt.yml
# 基于 RAX3000M 的 ImmortalWrt 云编译工作流（优化修复版）

name: Build RAX3000M Firmware

on:
  workflow_dispatch:  # 仅支持手动触发编译

env:
  # ========== 核心配置 ==========
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02       # 源码分支
  FEEDS_CONF: feeds.conf.default   # 默认 feeds 配置文件
  CONFIG_FILE: configs/rax3000m.config  # 设备配置文件
  DIY_P1_SH: diy-part1.sh          # 自定义脚本1（早期配置）
  DIY_P2_SH: diy-part2.sh          # 自定义脚本2（后期配置）
  TZ: Asia/Shanghai                # 时区设置
  FIRMWARE_NAME: RAX3000M_$(date +"%Y%m%d")  # 固件命名规则

jobs:
  build:
    runs-on: ubuntu-latest         # 使用最新 Ubuntu 环境

    steps:
    # ========== 代码检出 ==========
    - name: Checkout Repository
      uses: actions/checkout@v4    # 检出当前仓库代码（含自定义脚本）
      with:
        submodules: recursive      # 递归检出子模块（如有）

    # ========== 缓存恢复 ==========
    - name: Restore Build Cache
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/dl      # 缓存下载的软件包
          /workdir/openwrt/ccache  # 缓存编译中间文件
        key: ${{ runner.os }}-immortalwrt-${{ hashFiles('$FEEDS_CONF') }}-${{ hashFiles('$CONFIG_FILE') }}
        restore-keys: |
          ${{ runner.os }}-immortalwrt-  # 缓存回退策略

    # ========== 环境初始化 ==========
    - name: Setup Build Environment
      env:
        DEBIAN_FRONTEND: noninteractive  # 禁用交互提示
      run: |
        # 清理冗余目录（保留APT源配置）
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc

        # 修复APT源配置（关键修复步骤）
        sudo sed -i 's/^#\s*deb-src/deb-src/' /etc/apt/sources.list  # 启用源码仓库
        sudo add-apt-repository -y universe  # 启用 universe 仓库

        # 安装编译依赖
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential \
          ccache \
          libncurses5-dev \
          git \
          python3 \
          rsync

        # 初始化 ImmortalWrt 编译环境
        sudo bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)

        # 设置时区和目录权限
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

    # ========== 源码克隆 ==========
    - name: Clone Source Code
      working-directory: /workdir  # 指定工作目录
      run: |
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt  # 克隆指定分支的源码

    # ========== 自定义配置加载 ==========
    - name: Apply Custom Configurations
      run: |
        # 加载自定义 feeds 配置
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" /workdir/openwrt/feeds.conf.default
        
        # 执行第一阶段自定义脚本
        chmod +x "$DIY_P1_SH"
        cd /workdir/openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH" || exit 1  # 脚本失败则终止

    # ========== 依赖管理 ==========
    - name: Update Feeds
      run: |
        cd /workdir/openwrt
        ./scripts/feeds update -a || exit 1  # 强制失败退出

    - name: Install Feeds
      run: |
        cd /workdir/openwrt
        ./scripts/feeds install -a || exit 1

    # ========== 编译准备 ==========
    - name: Prepare Configuration
      run: |
        # 加载设备配置文件
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" /workdir/openwrt/.config
        
        # 执行第二阶段自定义脚本
        chmod +x "$DIY_P2_SH"
        cd /workdir/openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH" || exit 1

    # ========== 资源下载 ==========
    - name: Download Packages
      run: |
        cd /workdir/openwrt
        make defconfig
        echo "CONFIG_CCACHE=y" >> .config  # 启用 ccache
        make CCACHE=1 download -j$(($(nproc) + 1))  # 多线程下载

    # ========== 固件编译 ==========
    - name: Compile Firmware
      env:
        CCACHE_MAXSIZE: 2G  # 限制缓存大小
      run: |
        cd /workdir/openwrt
        echo "::notice::🚀 开始编译，使用 $(($(nproc) + 1)) 线程..."
        make CCACHE=1 -j$(($(nproc) + 1)) || { 
          echo "::warning::⚠️ 编译失败，尝试单线程重试..."; 
          make CCACHE=1 -j1 V=s; 
        }
        echo "FIRMWARE_NAME=$FIRMWARE_NAME" >> $GITHUB_ENV  # 注入固件名称

    # ========== 固件上传 ==========
    - name: Upload Firmware Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FIRMWARE_NAME }}   # 按日期命名的固件
        path: /workdir/openwrt/bin/targets/*/*/*  # 自动匹配固件路径
